const objectobserver = require("objectobserver");

/**
 * @see lsObStruct in lsOb.h
 */
exports.Object = function (proxy, owner, worldInstance, id, isAppObject, name, notifyGroup) {
	this.owner = owner;
	this.proxy = proxy;
	this.worldInstance = worldInstance;	// worldInst
	
	this.id = id || worldInstance.world.server.generateId();	// oid
	
	this.groups = [];
	this.observers = [];	// obObservers
	this.sharedObservers = [];	// sharedObservers
	this.sayingQueue = [];	// sayQueue
	this.lastSayingTime = undefined;	// lastSaid
	
	this.nickName = undefined;	// nickname
	this.approvedAvatarId = -1;	// approvedAvOffset
	this.remoteId = -1;	// mapId
	this.name = name;
	this.isGlobal = true;	// global
	this.properties = {};
	
	if (isAppObject) worldInstance.appObjects.push(id);
	
	this.proxy.objects.push(this);
	if (notifyGroup) worldInstance.group.addObject(this);
};

exports.Object.prototype = {
	_avatarUrl: undefined,
	get avatarUrl() {
		return this._avatarUrl;
	},
	set avatarUrl(url) {
		this._avatarUrl = url;
		this.markAsDirty(objectobserver.dirtyAttrsAvatar);
	},
	
	_position: [[0, 0, 0], [0, 0, 0]],
	get position() {
		return this._position;
	},
	set position(pos) {
		this._position = pos;
		this.markAsDirty(objectobserver.dirtyAttrsPosition);
	},
};

exports.Object.prototype.isAppObject = function () {
	return this.worldInstance.appObjects.indexOf(this.id) >= 0;
};

/**
 * @see lsObObserverBegin in lsObObserver.h
 */
exports.Object.prototype.addObserver = function (socket) {
	var observer;
	for (var i = 0; i < this.observers.length; i++) {
		if (this.observers[i].socket == socket) {
			observer = this.observers[i];
			break;
		}
	}
	if (observer) observer.numInstances++;
	else new objectobserver.ObjectObserver(this, socket);
};

/**
 * @see lsObDirty() in lsOb.c
 */
exports.Object.prototype.markAsDirty = function (attrs) {
	this.observers.forEach(function (obs, idx, arr) {
		if (obs.dirty) obs.dirty |= attrs;
		else if ((obs.dirty = attrs)) obs.socket.dirtyObservers.push(obs);
	});
};
