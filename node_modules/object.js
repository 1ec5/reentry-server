/**
 * @see lsObStruct in lsOb.h
 */
exports.Object = function (proxy, owner, worldInstance, id, isAppObject, name, notifyGroup) {
	this.owner = owner;
	this.proxy = proxy;
	this.worldInstance = worldInstance;	// worldInst
	
	this.id = id || worldInstance.world.server.generateId();	// oid
	
	this.groups = [];
	this.observers = [];	// obObservers
	this.sharedObservers = [];	// sharedObservers
	this.sayingQueue = [];	// sayQueue
	this.lastSayingTime = undefined;	// lastSaid
	
	this.position = [[0, 0, 0], [0, 0, 0]];
	this.avatarUrl = undefined;
	this.nickName = undefined;	// nickname
	this.approvedAvatarId = -1;	// approvedAvOffset
	this.remoteId = -1;	// mapId
	this.name = name;
	this.isGlobal = true;	// global
	this.properties = {};
	
	if (isAppObject) worldInstance.appObjects.push(id);
	
	this.proxy.objects.push(this);
	if (notifyGroup) worldInstance.group.addObject(this);
};

exports.Object.prototype.isAppObject = function () {
	return this.worldInstance.appObjects.indexOf(this.id) >= 0;
};

/**
 * @see lsObObserverBegin in lsObObserver.h
 */
exports.Object.prototype.addObserver = function (socket) {
	var observer;
	for (var i = 0; i < this.observers.length; i++) {
		if (this.observers[i].socket == socket) {
			observer = this.observers[i];
			break;
		}
	}
	if (observer) observer.numInstances++;
	else new objectobserver.ObjectObserver(this, socket);
};
