const types = require("types.js");
const objectobserver = require("objectobserver.js");

/**
 * @see lsObGroupStruct in lsObGroup.h
 * @see lsObGroupCreate in lsObGroup.h
 */
function ObjectGroup(server, id) {
	this.id = id || server.generateId();	// gid
	this.objects = [];	// obs
	this.observers = [];	// observers
	this.server = server;	// lss
	this.name = undefined;	// name
}

/**
 * @see lsObGroupAddOb in lsObGroup.h
 */
ObjectGroup.prototype.addObject = function (object) {
	if (!object) throw "No object to add.";
	
	object.groups.push(this);
	this.objects.push(object);
	
	for (var i = 0; i < this.observers.length; i++) {
		var socket = this.observers[i];
		if (socket.version.appVersion < 3) {
			if (object.isAppObject() || object.name) continue;
			
			socket.send(new types.AddOb1(this.id, object.id));
		}
		else {
			if (object.isAppObject()) {
				socket.send(new types.AddObWithName1(this.id, object.id));
			}
			else if (!object.name) {
				socket.send(new types.AddOb1(this.id, object.id));
			}
		}
		
		if (object.proxy != socket) object.addObserver(socket);
	}
};

/**
 * @see lsObGroupAddObserver() in lsObGroup.h
 */
ObjectGroup.prototype.addObserver = function (socket) {
	socket.observingGroups.push(this);
	this.observers.push(socket);
	
	var objectIds = [];
	for (var i = 0; i < this.objects.length; i++) {
		var obj = this.objects[i];
		if (!obj.isAppObject()) objectIds.push(obj.id);
		else if (socket.version.appVersion >= 3) {
			socket.send(new types.AddObWithName1(this.id, object.id));
		}
	}
	
	socket.send(new types.ObGroupObserverAdded1({
		gid: this.id,
		//cid: socket.clientId,
		numObs: objectIds.length,
		obs: objectIds,
	}, function () {
		if (socket.version.appVersion > 2) {
			for (var i = 0; i < this.objects.length; i++) {
				var object = this.objects[i];
				if (object.proxy != socket) object.addObserver(socket);
			}
		}
		else for (var i = 0; i < this.objects.length; i++) {
			var object = this.objects[i];
			if (!object.isAppObject() && object.proxy != socket) {
				object.addObserver(socket);
			}
		}
	}));
};

exports.ObjectGroup = ObjectGroup;
