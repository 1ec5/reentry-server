const types = require("types");

exports.dirtyAttrsPosition = 1 << 0;
exports.dirtyAttrsAvatar = 1 << 1;
exports.dirtyAttrsNickName = 1 << 2;
exports.numDirtyAttrs = 3;
exports.dirtyAttrsAll = (1 << exports.numDirtyAttrs) - 1;

/**
 * @see lsObObserverCreate() in lsObObserver.c
 */
function ObjectObserver(object, socket) {
	this.object = object;	// ob
	this.socket = socket;	// lsc
	this.numInstances = 1;	// reps
	this.dirty = exports.dirtyAttrsAll;
	
	if (!object.avatarUrl) this.dirty &= ~exports.dirtyAttrsAvatar;
	if (!object.nickName) this.dirty &= ~exports.dirtyAttrsNickName;
	if (!object.position[0][0] && !object.position[0][1] && !object.position[0][2] &&
		!object.position[1][0] && !object.position[1][1] && !object.position[1][2]) {
		this.dirty &= ~exports.dirtyAttrsPosition;
	}
	
	socket.observers.push(this);
	if (this.dirty) socket.dirtyObservers.push(this);
	object.observers.push(this);
}

/**
 * @see lsObObserverUpdateClient() in lsRemoteClient.c
 */
ObjectObserver.prototype.flushUpdates = function () {
	if (this.dirty & exports.dirtyAttrsPosition) {
		var position = this.object.position;
		this.socket.send(new types.ObPosition1({
			oid: this.object.id,
			pos: position[0].concat(position[1]),
		}));
	}
	if (this.dirty & exports.dirtyAttrsAvatar) {
		// TODO: Update dirty avatar.
	}
	if (this.dirty & exports.dirtyAttrsNickName) {
		// TODO: Update dirty nickname.
	}
	this.dirty = 0;
};

exports.ObjectObserver = ObjectObserver;
